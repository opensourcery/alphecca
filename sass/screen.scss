// *** SMACSSified ! *** //

// *** Imports *** //
// Sass imports.
// Code here shouldn’t generate any selectors or rules.

// * Compass Imports * //
@import "compass/reset"; 
@import "compass/css3/images";
@import "compass/css3/box-shadow";

// * Local Imports * //
@import "grid"; // 960.gs grid
@import "sourcesans";


// *** Variables *** //
// Sass variables that generate a single value.
// Code here shouldn’t generate any selectors or rules.

// * Colors * //
// Red family : use for DANGER, ERROR, REQUIRED : Hue ~357°
$red:           hsl(359, 77%, 40%);
$light-red:     hsl(357, 82%, 78%);
$pale-red:      hsl(355, 50%, 95%);

// Orange family: use for WARNING, ALERT : Hue ~39°
$orange:        hsl(30, 100%, 45%);
$light-orange:  hsl(39, 99%, 72%);
$pale-orange:   hsl(60, 90%, 96%);

// Blue family: use for INFO, OPTIONAL ACTION, LINKS : Hue ~200°
$blue:          hsl(200, 77%, 43%);
$light-blue:    hsl(200, 79%, 57%);
$pale-blue:     hsl(201, 52%, 95%);

// Green family: use for STATUS, SUCCESS, SUGGESTED ACTION : Hue ~70°
$green:         hsl(71, 78%, 28%);
$light-green:   hsl(70, 61%, 51%);
$pale-green:    hsl(69, 56%, 93%);

// Canonical grays, defined by gray_[n] where [n] is floor/10 value of hsl()
// I define grays this way to allow me to redefine grays into more meaningful 
// variables later, and to help minimize proliferation of grays (this is hard)
$gray_3:          hsl(0, 0%, 35%);
$gray_6:          hsl(0, 0%, 67%);
$gray_8:          hsl(0, 0%, 85%);

// Gray aliases. Meaningful gray names, aliased to canonical grays
$gray:            $gray_3;
$light-gray:      $gray_6;
$pale-gray:       $gray_8;
$white:           white;
$black:           black;
$eigengrau:       hsl(240,14,10);   // use instead of pure black for text or large fields
$paperwhite:      hsl(0,0,92);     // use instead of pure white for large fields

// * Fonts * //
$main-font-family: "SourceSansPro", helvetica, arial, sans-serif;
// Since the typical default browser font-size is 16px, that makes the calculation for grid size.
// If you want your base font-size to be a different size and not have it effect grid size too,
// set the value of $em-base to $base-font-size ($em-base: $base-font-size;)
$em-base: 16px !default;

// * Layout breakpoints * //
$mobile-breakpoint: 480px;
$tablet-breakpoint: 1024px;


// *** Mixins *** //
// Sass mixins that generate selectors or rules when called elsewhere.
// Code here shouldn’t generate any selectors or rules on their own.

@mixin respond_to($size:'desktop') { 
// use this mixin to bubble up @content on @media queries within a selector. Easier than writing all your viewport queries in one place.
// $size expects one of the following values: mobile, tablet, and desktop. 
// This is a Sass 3.2+-only mixin, it accepts rules as arguments (@content) See http://thesassway.com/intermediate/responsive-web-design-in-sass-using-media-queries-in-sass-32
	@if $size == mobile {
		@media screen and (max-width: $mobile-breakpoint) {
			@content;
		}
  }
  @else if $size == tablet {
    @media screen and (max-width: $tablet-breakpoint) {
      @content;
    }
  }
  @else { // desktop
    @media screen and (min-width: $tablet-breakpoint + 1) {
      @content;
    }
  }
}

@mixin headers() { } 
@mixin background ($foo) { }

// *** Functions *** //
// Sass functions that generate a single value.
// Code here shouldn’t generate any selectors or rules.

@function emCalc($pxWidth) {
  // Working in ems is annoying. Think in pixels by using this handy function, emCalc(#px)
	@return $pxWidth / $em-base * 1em;
}


// *** Base *** //
// A Base rule is applied to an element using an element selector, a descendent
// selector, or a child selector, along with any pseudo-classes. It doesn’t
// include any class or ID selectors. It is defining the default styling for how
// that element should look in all occurrences on the page.
// -- http://smacss.com/book/type-base

html, body {
	font-family: $main-font-family;
}
body {
  @include respond_to(tablet) {
    font-size: emCalc(16px);
  }
  line-height: 1.2;
	color: $eigengrau;
	background-color: $paperwhite;
}
img {
	max-width: 100%;
}
// * Links * //
a {
  &:link {
    color: $blue;
    text-decoration: none;
  }
  &:hover {
    color: $green;
    text-decoration: underline;
  }
  &:active {
    color: $red;
  }
  &:visited {
    color: $light-blue;
    text-decoration: none;
  }
}
h1 {
  @include respond_to(tablet) {
    font-size: emCalc(48px);
  }
  @include respond_to(mobile) {
    font-size: emCalc(40px);
  }
}
h2 { // unused?
  @include respond_to(tablet) {
    font-size: emCalc(36px);
  }
  @include respond_to(mobile) {
    font-size: emCalc(32px);
  }
}
h3 {
  @include respond_to(tablet) {
    font-size: emCalc(24px);
  }
  @include respond_to(mobile) {
    font-size: emCalc(22px);
  }
  margin-bottom: 1em;
}
h4 { }
h5 { }
h6 { }
p {
  margin: 1em 0;
}
address {
}
strong, b {
  font-weight: bold;
}
em, cite, i {
  font-style: italic;
}
/* Forms */
form { }
input[type=text], textarea { }
input[type=submit] { }
ul {
  padding-left: emCalc(30px);
  list-style: disc;
}

// *** Layout *** //
// -- http://smacss.com/book/type-layout
// generally handled by grid import at top of this file


// *** Modules *** //
// Discrete components of the page, nav bars, dialogs, panels etc.
// -- http://smacss.com/book/type-module


// *** State *** //
// augments and overrides all other styles. 
// -- http://smacss.com/book/type-state

.align-left {
  text-align: left;
}
.align-center {
  text-align: center;
}
.align-right {
  text-align: right;
}


// *** Theme *** //
// defines colours and images that give your application or site its look and feel
// not generally used in a Sass project, easier to change variables.
// -- http://smacss.com/book/type-theme

